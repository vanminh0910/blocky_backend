
#================================================================
# This project was generated by Serverless HQ:
# Your home base for powerfully easy Serverless scaffolding.
# Made in knoxville, tn by haseebnqureshi (_hq)
#================================================================

frameworkVersion: ">=1.6.0 <2.0.0"

service: blocky-backend

provider:
  name: aws
  runtime: nodejs6.10
  stage: dev
  region: us-east-1
  profile: default
  versionFunctions: false
  iamRoleStatements:

    # Lambda iam role permissions onto dynamodb
    - Effect: Allow
      Action:
        - dynamodb:*
      Resource: arn:aws:dynamodb:*:*:*

  environment:

    # Project environment variables
    SERVICE: blocky_backend
    PROVIDER_NAME: aws
    PROVIDER_RUNTIME: nodejs6.10
    PROVIDER_STAGE: dev
    PROVIDER_REGION: us-east-1
    PROVIDER_PROFILE: default

    USERS_TABLE_NAME: ${self:service}-${opt:stage, self:provider.stage}-users
    DEVICES_TABLE_NAME: ${self:service}-${opt:stage, self:provider.stage}-devices
    SCRIPTS_TABLE_NAME: ${self:service}-${opt:stage, self:provider.stage}-scripts
    DASHBOARDS_TABLE_NAME: ${self:service}-${opt:stage, self:provider.stage}-dashboards
    SETTINGS_TABLE_NAME: ${self:service}-${opt:stage, self:provider.stage}-settings
    MESSAGES_TABLE_NAME: ${self:service}-${opt:stage, self:provider.stage}-messages

    JWT_SECRET_KEY: ${file(./${opt:stage, self:provider.stage}.env.yml):${opt:stage, self:provider.stage}.JWT_SECRET_KEY}
    BROKER_NAME: ${file(./${opt:stage, self:provider.stage}.env.yml):${opt:stage, self:provider.stage}.BROKER_NAME}
    BROKER_EMAIL: ${file(./${opt:stage, self:provider.stage}.env.yml):${opt:stage, self:provider.stage}.BROKER_EMAIL}
    BROKER_PASSWORD: ${file(./${opt:stage, self:provider.stage}.env.yml):${opt:stage, self:provider.stage}.BROKER_PASSWORD}
    BROKER_URL: ${file(./${opt:stage, self:provider.stage}.env.yml):${opt:stage, self:provider.stage}.BROKER_URL}
    BROKER_PORT: ${file(./${opt:stage, self:provider.stage}.env.yml):${opt:stage, self:provider.stage}.BROKER_PORT}

custom:

  # Crud-enabled env variables (for yml self-reference)
  USERS_TABLE_NAME: ${self:service}-${opt:stage, self:provider.stage}-users
  DEVICES_TABLE_NAME: ${self:service}-${opt:stage, self:provider.stage}-devices
  SCRIPTS_TABLE_NAME: ${self:service}-${opt:stage, self:provider.stage}-scripts
  DASHBOARDS_TABLE_NAME: ${self:service}-${opt:stage, self:provider.stage}-dashboards
  SETTINGS_TABLE_NAME: ${self:service}-${opt:stage, self:provider.stage}-settings
  MESSAGES_TABLE_NAME: ${self:service}-${opt:stage, self:provider.stage}-messages
  dynamodb:
    start:
      port: 8000
      inMemory: false
      migrate: true
    migration:
      dir: offline/migrations
    seed:
      users:
        sources:
          - table: ${self:custom.USERS_TABLE_NAME}
            sources: [./offline/seed/users.json]

  apiKeys:
    - ${opt:stage, self:provider.stage}-brokerAPIKey

functions:

  auth:
    handler: lib/auth.auth

  seed:
    handler: lib/seed.seed
    events:
      - http:
          path: seed/
          method: get
          cors:
            origins:
              - '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
  #==========================
  # Messages Methods
  #==========================

  #NewCreate
  MessagesNew:
    handler : messages/create.create
    events :
      - http: 
         path : messages
         method : post
         authorizer : auth
         cors:
            origins:
              - '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
  #==========================
  # Users Methods
  #==========================

  UsersSignup:
    handler: users/signup.signup
    events:
      - http:
          path: users/signup
          method: post
          cors: true

  UsersLogin:
    handler: users/login.login
    events:
      - http:
          path: users/login
          method: post
          cors: true

  UsersChangePassword:
    handler: users/change-password.changePassword
    events:
      - http:
          path: users/password
          method: post
          authorizer:
            name: auth
            resultTtlInSeconds: 0
          cors: true

  UsersChangeAuthKey:
    handler: users/change-auth-key.changeAuthKey
    events:
      - http:
          path: users/changeAuthKey
          method: post
          authorizer:
            name: auth
            resultTtlInSeconds: 0
          cors: true

  UsersValidateAuthKey:
    handler: users/validate-auth-key.validateAuthKey
    events:
      - http:
          path: users/validateAuthKey
          method: post
          cors: true
          private: true

  UsersChangeProfile:
    handler: users/change-profile.changeProfile
    events:
      - http:
          path: users/profile
          method: post
          authorizer:
            name: auth
            resultTtlInSeconds: 0
          cors: true

  #==========================
  # Devices Methods
  #==========================

  # Create
  DevicesCreate:
    handler: devices/create.create
    events:
      - http:
          path: devices
          method: post
          authorizer:
            name: auth
            resultTtlInSeconds: 0
          cors: true

  # ReadAll
  DevicesReadAll:
    handler: devices/list.listByUser
    events:
      - http:
          path: devices
          method: get
          authorizer:
            name: auth
            resultTtlInSeconds: 0
          cors: true

  # Read
  DevicesGet:
    handler: devices/get.get
    events:
      - http:
          path: devices/{id}
          method: get
          authorizer:
            name: auth
            resultTtlInSeconds: 0
          cors: true

  # Update
  DevicesUpdate:
    handler: devices/update.update
    events:
      - http:
          path: devices/{id}
          method: put
          authorizer:
            name: auth
            resultTtlInSeconds: 0
          cors: true

  # Delete
  DevicesDelete:
    handler: devices/delete.delete
    events:
      - http:
          path: devices/{id}
          method: delete
          authorizer:
            name: auth
            resultTtlInSeconds: 0
          cors: true

  #==========================
  # Scripts Methods
  #==========================

  # Create
  ScriptsCreate:
    handler: scripts/create.create
    events:
      - http:
          path: scripts
          method: post
          authorizer:
            name: auth
            resultTtlInSeconds: 0
          cors: true

  # ReadAll
  ScriptsReadAll:
    handler: scripts/list.listByUser
    events:
      - http:
          path: scripts
          method: get
          authorizer:
            name: auth
            resultTtlInSeconds: 0
          cors: true

  # Read
  ScriptsGet:
    handler: scripts/get.get
    events:
      - http:
          path: scripts/{id}
          method: get
          authorizer:
            name: auth
            resultTtlInSeconds: 0
          cors: true

  # Update
  ScriptsUpdate:
    handler: scripts/update.update
    events:
      - http:
          path: scripts/{id}
          method: put
          authorizer:
            name: auth
            resultTtlInSeconds: 0
          cors: true
          
  # Delete
  ScriptsDelete:
    handler: scripts/delete.delete
    events:
      - http:
          path: scripts/{id}
          method: delete
          authorizer:
            name: auth
            resultTtlInSeconds: 0
          cors: true

  #==========================
  # Dashboards Methods
  #==========================

  # Create
  DashboardsCreate:
    handler: dashboards/create.create
    events:
      - http:
          path: dashboards
          method: post
          authorizer:
            name: auth
            resultTtlInSeconds: 0
          cors: true

  # ReadAll
  DashboardsReadAll:
    handler: dashboards/list.listByUser
    events:
      - http:
          path: dashboards
          method: get
          authorizer:
            name: auth
            resultTtlInSeconds: 0
          cors: true

  # Read
  DashboardsGet:
    handler: dashboards/get.get
    events:
      - http:
          path: dashboards/{id}
          method: get
          authorizer:
            name: auth
            resultTtlInSeconds: 0
          cors: true
      
  # Update
  DashboardsUpdate:
    handler: dashboards/update.update
    events:
      - http:
          path: dashboards/{id}
          method: put
          authorizer:
            name: auth
            resultTtlInSeconds: 0
          cors: true

  # Delete
  DashboardsDelete:
    handler: dashboards/delete.delete
    events:
      - http:
          path: dashboards/{id}
          method: delete
          authorizer:
            name: auth
            resultTtlInSeconds: 0
          cors: true


resources:
  Resources:

    # users dynamodb table resource
    UsersDynamoDBTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:custom.USERS_TABLE_NAME}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: email
            AttributeType: S
          - AttributeName: authKey
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        GlobalSecondaryIndexes:
        - IndexName: UsersEmailIndex
          KeySchema:
          - AttributeName: email
            KeyType: HASH
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1
        - IndexName: UsersAuthKeyIndex
          KeySchema:
          - AttributeName: authKey
            KeyType: HASH
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1

    # devices dynamodb table resource
    DevicesDynamoDBTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:custom.DEVICES_TABLE_NAME}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: ownerId
            AttributeType: S
        KeySchema:
          - AttributeName : ownerId
            KeyType: HASH
          - AttributeName: id
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    #messages dynamodb table resource
    MessagesDynamoDBTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:custom.MESSAGES_TABLE_NAME}
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: topic
            AttributeType: S
        KeySchema:
          - AttributeName : topic
            KeyType: HASH
          - AttributeName: userId
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    # scripts dynamodb table resource
    ScriptsDynamoDBTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:custom.SCRIPTS_TABLE_NAME}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: ownerId
            AttributeType: S
        KeySchema:
          - AttributeName : ownerId
            KeyType: HASH
          - AttributeName: id
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    # dashboards dynamodb table resource
    DashboardsDynamoDBTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:custom.DASHBOARDS_TABLE_NAME}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: ownerId
            AttributeType: S
        KeySchema:
          - AttributeName : ownerId
            KeyType: HASH
          - AttributeName: id
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    # dashboards dynamodb table resource
    SettingsDynamoDBTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:custom.SETTINGS_TABLE_NAME}
        AttributeDefinitions:
          - AttributeName: name
            AttributeType: S
        KeySchema:
          - AttributeName : name
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

# Keeping packages small by excluding node_modules
package:
  exclude:
    #- node_modules/**
    - lib/node_modules/aws-sdk/**

plugins:
  - serverless-dynamodb-local
  - serverless-offline  
